{"ast":null,"code":"import axios from 'axios';\n\n// Token management\nconst TOKEN_KEY = 'career_analyzer_token';\nexport const tokenManager = {\n  setToken: token => {\n    localStorage.setItem(TOKEN_KEY, token);\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  },\n  getToken: () => {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n  removeToken: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    delete api.defaults.headers.common['Authorization'];\n  },\n  initializeToken: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    }\n  }\n};\n\n// Initialize token on import\ntokenManager.initializeToken();\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000',\n  timeout: 30000,\n  // 30 seconds timeout for AI requests\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`✅ Response received from ${response.config.url}:`, response.status);\n  return response;\n}, error => {\n  console.error('❌ Response error:', error);\n\n  // Handle different error types\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    // Server responded with error status\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Server error';\n    console.error(`Server Error (${error.response.status}):`, message);\n    throw new Error(`Server Error: ${message}`);\n  } else if (error.request) {\n    // Request was made but no response received\n    console.error('Network Error: No response received', error.request);\n    throw new Error('Network Error: Unable to connect to server. Please check if the backend is running.');\n  } else {\n    // Something else happened\n    console.error('Request Error:', error.message);\n    throw new Error(`Request Error: ${error.message}`);\n  }\n});\n\n// API functions\nexport const careerAPI = {\n  // Analyze career paths\n  analyzeCareer: async (skills, expertise) => {\n    try {\n      console.log('analyzeCareer called with:', {\n        skills,\n        expertise\n      });\n      console.log('API base URL:', api.defaults.baseURL);\n      const requestData = {\n        skills,\n        expertise\n      };\n      console.log('Making POST request to /analyze with data:', requestData);\n      const response = await api.post('/analyze', requestData);\n      console.log('analyzeCareer response status:', response.status);\n      console.log('analyzeCareer response data:', response.data);\n      if (!response.data) {\n        throw new Error('Empty response from server');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('analyzeCareer error details:', {\n        message: error.message,\n        response: error.response,\n        request: error.request,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check error:', error);\n      throw error;\n    }\n  },\n  // Generate mock test\n  generateMockTest: async (skills, expertise, topic = null, userId = null) => {\n    try {\n      const requestData = {\n        skills,\n        expertise\n      };\n      if (topic) {\n        requestData.topic = topic;\n      }\n      const response = await api.post('/mock-test', requestData, {\n        params: userId ? {\n          user_id: userId\n        } : {}\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Mock test generation error:', error);\n      throw error;\n    }\n  },\n  // Authentication endpoints\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  getMe: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      console.error('Get user error:', error);\n      throw error;\n    }\n  },\n  updateMe: async userData => {\n    try {\n      const response = await api.put('/auth/me', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Update user error:', error);\n      throw error;\n    }\n  },\n  // Chat endpoints\n  updateSkillsViaChat: async message => {\n    try {\n      const response = await api.post('/chat/update-skills', {\n        message\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Chat update skills error:', error);\n      throw error;\n    }\n  },\n  // Skills endpoints\n  updateSkills: async (userId, message) => {\n    try {\n      const response = await api.post('/update-skills', {\n        user_id: userId,\n        message: message\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Update skills error:', error);\n      throw error;\n    }\n  },\n  // Root endpoint\n  getRoot: async () => {\n    try {\n      const response = await api.get('/');\n      return response.data;\n    } catch (error) {\n      console.error('Root endpoint error:', error);\n      throw error;\n    }\n  }\n};\n\n// Export the analyzeCareer function directly for convenience\nexport const analyzeCareer = async (skills, expertise) => {\n  try {\n    const response = await api.post('/analyze', {\n      skills,\n      expertise\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Career analysis error:', error);\n    throw error;\n  }\n};\n\n// Export the generateMockTest function directly for convenience\nexport const generateMockTest = async (skills, expertise, topic = null, userId = null) => {\n  try {\n    const requestData = {\n      skills,\n      expertise\n    };\n    if (topic) {\n      requestData.topic = topic;\n    }\n    const response = await api.post('/mock-test', requestData, {\n      params: userId ? {\n        user_id: userId\n      } : {}\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Mock test generation error:', error);\n    throw error;\n  }\n};\n\n// Export the getResources function for learning resources\nexport const getResources = async (skills, expertise, limit = 5) => {\n  try {\n    const requestData = {\n      skills,\n      expertise,\n      limit\n    };\n    const response = await api.post('/resources', requestData);\n    return response.data;\n  } catch (error) {\n    console.error('Get resources error:', error);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","TOKEN_KEY","tokenManager","setToken","token","localStorage","setItem","api","defaults","headers","common","getToken","getItem","removeToken","removeItem","initializeToken","create","baseURL","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response$data","_error$response$data2","message","data","detail","Error","careerAPI","analyzeCareer","skills","expertise","requestData","post","healthCheck","get","generateMockTest","topic","userId","params","user_id","register","userData","login","credentials","getMe","updateMe","put","updateSkillsViaChat","updateSkills","getRoot","getResources","limit"],"sources":["C:/Users/archd/OneDrive/Desktop/gemini3/gemini2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Token management\r\nconst TOKEN_KEY = 'career_analyzer_token';\r\n\r\nexport const tokenManager = {\r\n  setToken: (token) => {\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  },\r\n  \r\n  getToken: () => {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n  \r\n  removeToken: () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    delete api.defaults.headers.common['Authorization'];\r\n  },\r\n  \r\n  initializeToken: () => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    if (token) {\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    }\r\n  }\r\n};\r\n\r\n// Initialize token on import\r\ntokenManager.initializeToken();\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000',\r\n  timeout: 30000, // 30 seconds timeout for AI requests\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for logging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`✅ Response received from ${response.config.url}:`, response.status);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('❌ Response error:', error);\r\n    \r\n    // Handle different error types\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      const message = error.response.data?.detail || error.response.data?.message || 'Server error';\r\n      console.error(`Server Error (${error.response.status}):`, message);\r\n      throw new Error(`Server Error: ${message}`);\r\n    } else if (error.request) {\r\n      // Request was made but no response received\r\n      console.error('Network Error: No response received', error.request);\r\n      throw new Error('Network Error: Unable to connect to server. Please check if the backend is running.');\r\n    } else {\r\n      // Something else happened\r\n      console.error('Request Error:', error.message);\r\n      throw new Error(`Request Error: ${error.message}`);\r\n    }\r\n  }\r\n);\r\n\r\n// API functions\r\nexport const careerAPI = {\r\n  // Analyze career paths\r\n  analyzeCareer: async (skills, expertise) => {\r\n    try {\r\n      console.log('analyzeCareer called with:', { skills, expertise });\r\n      console.log('API base URL:', api.defaults.baseURL);\r\n      \r\n      const requestData = { skills, expertise };\r\n      console.log('Making POST request to /analyze with data:', requestData);\r\n      \r\n      const response = await api.post('/analyze', requestData);\r\n      console.log('analyzeCareer response status:', response.status);\r\n      console.log('analyzeCareer response data:', response.data);\r\n      \r\n      if (!response.data) {\r\n        throw new Error('Empty response from server');\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('analyzeCareer error details:', {\r\n        message: error.message,\r\n        response: error.response,\r\n        request: error.request,\r\n        config: error.config\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Health check\r\n  healthCheck: async () => {\r\n    try {\r\n      const response = await api.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Health check error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generate mock test\r\n  generateMockTest: async (skills, expertise, topic = null, userId = null) => {\r\n    try {\r\n      const requestData = {\r\n        skills,\r\n        expertise,\r\n      };\r\n      \r\n      if (topic) {\r\n        requestData.topic = topic;\r\n      }\r\n      \r\n      const response = await api.post('/mock-test', requestData, {\r\n        params: userId ? { user_id: userId } : {},\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Mock test generation error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Authentication endpoints\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/auth/register', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await api.post('/auth/login', credentials);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getMe: async () => {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get user error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateMe: async (userData) => {\r\n    try {\r\n      const response = await api.put('/auth/me', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update user error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Chat endpoints\r\n  updateSkillsViaChat: async (message) => {\r\n    try {\r\n      const response = await api.post('/chat/update-skills', { message });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Chat update skills error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Skills endpoints\r\n  updateSkills: async (userId, message) => {\r\n    try {\r\n      const response = await api.post('/update-skills', {\r\n        user_id: userId,\r\n        message: message\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update skills error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Root endpoint\r\n  getRoot: async () => {\r\n    try {\r\n      const response = await api.get('/');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Root endpoint error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// Export the analyzeCareer function directly for convenience\r\nexport const analyzeCareer = async (skills, expertise) => {\r\n  try {\r\n    const response = await api.post('/analyze', {\r\n      skills,\r\n      expertise,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Career analysis error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export the generateMockTest function directly for convenience\r\nexport const generateMockTest = async (skills, expertise, topic = null, userId = null) => {\r\n  try {\r\n    const requestData = {\r\n      skills,\r\n      expertise,\r\n    };\r\n    \r\n    if (topic) {\r\n      requestData.topic = topic;\r\n    }\r\n    \r\n    const response = await api.post('/mock-test', requestData, {\r\n      params: userId ? { user_id: userId } : {},\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Mock test generation error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export the getResources function for learning resources\r\nexport const getResources = async (skills, expertise, limit = 5) => {\r\n  try {\r\n    const requestData = {\r\n      skills,\r\n      expertise,\r\n      limit\r\n    };\r\n    \r\n    const response = await api.post('/resources', requestData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Get resources error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}